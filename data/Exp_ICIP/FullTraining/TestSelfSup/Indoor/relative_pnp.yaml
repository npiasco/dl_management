class: 'trainers.PoseTrainers.MultNetTrainer'
param_class:
#    cuda_on: False
    val_num_workers: 8
    optimizers_params:
        posenet_trainer:
            associated_net: ['Main', 'Deconv']
            optimizer_type: ADAM
            param:
                lr: 0.0001 # * 0.5
                weight_decay: 0.001

    training_pipeline:
        [
            #------------------ Main Forward -----------------#
            {
                mode: no_grad,
                trainer: posenet_trainer,
            },
            {
                mode: forward,
                func: minning.custom_forward,
                param: {multiples_instance: false, input_targets: [['batch', 'rgb' ], ]},
                net_name: 'Main',
                out_name: 'fw_main'
            },
            #-------------------------------------------------#
        ]
    eval_forwards:
        data:
            [
                {
                    mode: forward,
                    func: minning.custom_forward,
                    param: {multiples_instance: false, input_targets: [['batch', 'rgb' ], ]},
                    net_name: 'Main',
                    out_name: 'fw_main'
                },
                {
                    mode: forward,
                    func: minning.custom_forward,
                    param: {multiples_instance: false, input_targets: [['fw_main', 'conv2' ], ]},
                    net_name: 'FeatDesc',
                    out_name: 'im_desc'
                },
                {
                    mode: 'minning',
                    func: 'minning.construct_feat_database',
                    param: {feat: [im_desc], pose: ['batch', 'pose'], db: ['db']},
                    out_name: 'db'
                },
            ]
        queries:
            [
                #------------------ Main Forward -----------------#
                {
                    mode: forward,
                    func: minning.custom_forward,
                    param: {multiples_instance: false, input_targets: [['batch', 'rgb' ], ]},
                    net_name: 'Main',
                    out_name: 'fw_main'
                },
                {
                    mode: forward,
                    func: minning.custom_forward,
                    param: {multiples_instance: false, input_targets: [['fw_main', 'conv2' ], ]},
                    net_name: 'FeatDesc',
                    out_name: 'im_desc'
                },
                {
                    mode: forward,
                    func: minning.custom_forward,
                    param: {multiples_instance: false, detach_inputs: false, dict: True,
                    input_targets: [['fw_main'], ]},
                    net_name: 'Deconv',
                    out_name: 'maps'
                },
                {
                    mode: minning,
                    func: b_wrapper.inverse,
                    param: {data_to_inv: ['maps', -1], fact: 100, bounded: False, max_depth: 20},
                    out_name: 'fake_depth'
                },
                #----------------- Pose Refinement ----------------#
                {
                 mode: 'minning',
                 func: 'b_wrapper.batched_depth_map_to_pc',
                 param: {depth_maps: [fake_depth], K: [batch, K], remove_zeros: false, inverse_depth: false, scale_factor: 0.25},
                 out_name: 'pc'
                },
                {
                 mode: 'minning',
                 func: 'b_wrapper.resize',
                 param: {inputs: ['fw_main', 'conv2'], scale_factor: 0.5, flatten: true},
                 out_name: 'desc'
                },
                {
                 mode: 'minning',
                 func: 'minning.get_nn_pose_from_desc',
                 param: {feat: ['im_desc'], db: ['db'], k_nn: 1,},
                 out_name: 'posenet_pose'
                },
                {
                 mode: 'minning',
                 func: 'minning.get_nn_pose_from_desc',
                 param: {feat: ['im_desc'], db: ['db'], k_nn: 2, step_k_nn: 20, angle_threshold: 5.0},
                 out_name: 'put_poses'
                },
                {
                 mode: 'minning',
                 func: 'minning.images_from_poses',
                 param: {poses: ['put_poses'], data: ['ref_data']},
                 out_name: 'rgb_images'
                },
                {
                 mode: forward,
                 func: minning.simple_multiple_forward,
                 param: {input_targets: ['rgb_images']},
                 net_name: 'Main',
                 out_name: 'fw_rgb_images'
                },
                {
                 mode: forward,
                 func: minning.simple_multiple_forward,
                 param: {input_targets: ['fw_rgb_images']},
                 net_name: 'Deconv',
                 out_name: 'map_rgb_images'
                },
                {
                 mode: minning,
                 func: b_wrapper.inverse,
                 param: {multiples_instance: True, data_to_inv: ['map_rgb_images'],
                 fact: 100, bounded: False, max_depth: 20},
                 out_name: 'fake_depth_maps'
                },
                {
                 mode: 'minning',
                 func: 'b_wrapper.batched_depth_map_to_pc',
                 param: {multiples_instance: True, depth_maps: [fake_depth_maps], K: [batch, K], remove_zeros: false,
                 inverse_depth: false, modify_K: false, scale_factor: 0.25},
                 out_name: 'ref_pcs'
                },
                {
                 mode: 'minning',
                 func: 'b_wrapper.resize',
                 param: {multiples_instance: True, inputs: ['fw_rgb_images', 'conv2'], scale_factor: 0.5,
                 flatten: true},
                 out_name: 'ref_descs'
                },
                {
                 mode: 'mult_forward',
                 func: 'b_wrapper.pnp',
                 param: {init_T: ['put_poses'], K: [batch, K], relative_pnp: True, only_pc_for_triangulation: true,
                 pc_to_align: ['pc'], pc_ref: ['ref_pcs'],
                 desc_to_align: ['desc'], desc_ref: ['ref_descs'],
                 param_pnp: {iterations: 1000, ransac_threshold: 0.0002, }},
                 net_name: ['Desc', 'MatchNet', ],
                 out_name: 'pnp_pose'
                },
            ]
    access_pose: ['pnp_pose']
    build_model_func: torch.cat

eval_class: 'score.Functions.GlobalPoseError'
param_eval_class:
    data_type: 'position'
    pooling_type: 'mean'
test_func:
    med_pos:
        class: 'score.Functions.GlobalPoseError'
        param_class:
            data_type: 'position'
            pooling_type: 'median'
    med_ori:
        class: 'score.Functions.GlobalPoseError'
        param_class:
          data_type: 'orientation'
          pooling_type: 'median'
