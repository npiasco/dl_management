class: 'trainers.PoseTrainers.MultNetTrainer'
param_class:
    cuda_on: True
    val_num_workers: 8
    optimizers_params:
        deconv_trainer:
            associated_net: ['Main', 'Deconv', 'Pose']
            optimizer_type: ADAM
            param:
                lr: 0.00001 # * 0.5
                weight_decay: 0.001
    training_pipeline:
        [
            #------------------ Main Forward -----------------#
            {
                mode: no_grad,
                trainer: deconv_trainer
            },
            {
                mode: forward,
                func: minning.custom_forward,
                param: {multiples_instance: false, input_targets: [['batch', 0, 'rgb' ], ]},
                net_name: 'Main',
                out_name: 'fw_main_0'
            },
            {
                mode: forward,
                func: minning.custom_forward,
                param: {multiples_instance: false, input_targets: [['batch', 1, 'rgb' ], ]},
                net_name: 'Main',
                out_name: 'fw_main_1'
            },
            {
                mode: forward,
                func: minning.custom_forward,
                param: {multiples_instance: false, input_targets: [['fw_main_0'], ], detach_inputs: true, dict: True},
                net_name: 'Deconv',
                out_name: 'maps_0'
            },
            {
                mode: forward,
                func: minning.custom_forward,
                param: {multiples_instance: false, input_targets: [['fw_main_1'], ], detach_inputs: true, dict: True},
                net_name: 'Deconv',
                out_name: 'maps_1'
            },
            #-------------------------------------------------#
            {
             mode: 'minning',
             func: 'b_wrapper.batched_depth_map_to_pc',
             param: {depth_maps: [maps_0], K: [batch, 0, K], remove_zeros: false, scale_factor: 0.5},
             out_name: 'pc_0'
            },
            {
             mode: 'minning',
             func: 'b_wrapper.batched_depth_map_to_pc',
             #param: {depth_maps: [maps_1], K: [batch, 1, K], remove_zeros: false, scale_factor: 0.5},
             param: {depth_maps: [batch, 1, depth], K: [batch, 1, K], remove_zeros: false, inverse_depth: false, scale_factor: 0.5},
             out_name: 'pc_1'
            },
#            {
#             mode: 'minning',
#             func: 'minning.detach_input',
#             param: {inputs: ['pc_0']},
#             out_name: 'detached_pc_0'
#            },
            {
             mode: 'minning',
             func: 'minning.detach_input',
             param: {inputs: ['pc_1']},
             out_name: 'detached_pc_1'
            },
            {
             mode: 'minning',
             func: 'b_wrapper.resize',
             param: {inputs: [fw_main_0, conv1], scale_factor: 0.5},
             out_name: 'desc_0'
            },
            {
             mode: 'minning',
             func: 'b_wrapper.resize',
             param: {inputs: [fw_main_1, conv1], scale_factor: 0.5},
             out_name: 'desc_1'
            },
            {
             mode: 'forward',
             func: 'minning.custom_forward',
             param: {multiples_instance: false, input_targets:
             [['detached_pc_1'], ['pc_0'], ['desc_1'], ['desc_0']]},
             net_name: 'CPNet',
             out_name: 'icp_0_1'
            },
#            {
#             mode: 'forward',
#             func: 'minning.custom_forward',
#             param: {multiples_instance: false, input_targets:
#             [['detached_pc_0'], ['pc_1'], ['desc_0'], ['desc_1']]},
#             net_name: 'CPNet',
#             out_name: 'icp_1_0'
#            },
            {
             mode: 'minning',
             func: 'b_wrapper.matmul',
             param: {m1: ['batch', 0,  'pose', 'T'], m2: ['batch', 1,  'pose', 'T'], inv_m1: true},
             out_name: 'T_0_1'
            },
#            {
#             mode: 'minning',
#             func: 'b_wrapper.matmul',
#             param: {m1: ['batch', 1,  'pose', 'T'], m2: ['batch', 0,  'pose', 'T'], inv_m1: true},
#             out_name: 'T_1_0'
#            },
             #-------------------- Losses ---------------------#
            {
             mode: 'loss',
             name: 't01_loss',
             func: 'loss_func.T_loss',
             args: [['icp_0_1', 'T'], ['T_0_1']],
             param: {}
            },
            {
             mode: 'loss',
             name: 'reg_loss',
             func: 'loss_func.reg_loss',
             args: [['maps_0'], ['batch', 0, 'rgb']],
             param: {fact: 0.05}
            },
#            {
#             mode: 'loss',
#             name: 't10_loss',
#             func: 'loss_func.T_loss',
#             args: [['icp_1_0', 'T'], ['T_1_0']],
#             param: {}
#            },
            {
             mode: 'backprop',
             name: 'deconv_backprop',
             trainer: 'deconv_trainer',
             clip_grad: {networks: [Deconv], norm_max: 0.005}
            },
            #-------------------------------------------------#
        ]
    eval_forwards:
        data:
            [
                {
                 mode: 'minning',
                 func: 'b_wrapper.add_variable',
                 param: {value: [[0], [0]], load: false, source: ['batch', 'rgb' ]},
                 out_name: 'model'
                },
            ]
        queries:
            [
                #------------------ Main Forward -----------------#
                {
                    mode: forward,
                    func: minning.custom_forward,
                    param: {multiples_instance: false, input_targets: [['batch', 'rgb' ], ]},
                    net_name: 'Main',
                    out_name: 'fw_main'
                },
                {
                    mode: forward,
                    func: minning.custom_forward,
                    param: {multiples_instance: false, input_targets: [['fw_main' ], ]},
                    net_name: 'Deconv',
                    out_name: 'maps'
                },
                {
                    mode: forward,
                    func: minning.custom_forward,
                    param: {multiples_instance: false, input_targets: [['fw_main', 'conv7'], ]},
                    net_name: 'Pose',
                    out_name: 'posenet_pose'
                },
                #----------------- Pose Refinement ----------------#
                {
                 mode: 'minning',
                 func: 'b_wrapper.batched_depth_map_to_pc',
                 param: {depth_maps: [maps], K: [batch, K], remove_zeros: false, scale_factor: 0.3},
                 #param: {depth_maps: [batch, depth], K: [batch, K], remove_zeros: false, inverse_depth: false, scale_factor: 0.3},
                 out_name: 'pc'
                },
                {
                 mode: 'minning',
                 func: 'b_wrapper.resize',
                 param: {inputs: [fw_main, conv1], scale_factor: 0.3},
                 out_name: 'desc'
                },
                {
                 mode: 'mult_forward',
                 func: 'b_wrapper.advanced_local_map_getter',
                 param: {T: ['posenet_pose', 'T'], descriptors_size: 64,
                 map_args: {scene: heads/, frame_spacing: 20, output_size: 2000, no_grad: true,
                 resize: 0.1166666667, num_pc: 8, cnn_depth: false, cnn_descriptor: 'conv1'}},
                 net_name: ['Main', 'Deconv'],
                 out_name: 'model'
                },
                {
                 mode: 'minning',
                 func: 'b_wrapper.matmul',
                 param: {m1: ['posenet_pose', 'T'], m2: ['pc']},
                 out_name: 'moved_pc'
                },
                {
                    mode: 'forward',
                    func: 'minning.custom_forward',
                    param: {multiples_instance: false, input_targets: [['moved_pc'], ['model', 'pc'], ['desc'], ['model', 'desc'] ]},
                    net_name: 'CPNet',
                    out_name: 'icp'
                },
                {
                 mode: 'minning',
                 func: 'b_wrapper.matmul',
                 param: {m1: ['icp', 'T'], m2: ['posenet_pose', 'T'], get_pq: true},
                 out_name: 'F_pose'
                },
            ]
    access_pose: ['F_pose']
    #access_pose: ['posenet_pose']
    build_model_func: torch.cat

eval_class: 'score.Functions.GlobalPoseError'
param_eval_class:
    data_type: 'position'
    pooling_type: 'mean'
test_func:
    med_pos:
        class: 'score.Functions.GlobalPoseError'
        param_class:
            data_type: 'position'
            pooling_type: 'median'
    med_ori:
        class: 'score.Functions.GlobalPoseError'
        param_class:
          data_type: 'orientation'
          pooling_type: 'median'
