class: 'trainers.PoseTrainers.MultNetTrainer'
param_class:
    cuda_on: False
    val_num_workers: 8
    optimizers_params:
        main_trainer:
            associated_net: ['Main', 'Deconv']
            optimizer_type: ADAM
            param:
                lr: 0.0001
                weight_decay: 0.001
    training_pipeline:
        [
            #------------------ Main Forward -----------------#
            {
                mode: forward,
                func: minning.custom_forward,
                param: {multiples_instance: false, input_targets: [['batch', 'rgb' ], ]},
                net_name: 'Main',
                out_name: 'fw_main'
            },
            {
                mode: forward,
                func: minning.custom_forward,
                param: {multiples_instance: false, input_targets: [['fw_main'], ]},
                net_name: 'Deconv',
                out_name: 'maps'
            },
            #-------------------- Losses ---------------------#
            {
             mode: 'minning',
             func: 'b_wrapper.inverse',
             param: {data_to_inv: [maps], offset: -1},
             out_name: 'depth_maps'
            },
            {
             mode: 'loss',
             name: 'depth_loss',
             func: 'loss_func.l1_modal_loss',
             args: [['depth_maps'], ['batch', 'depth']],
             param: {no_zeros: true, factor: 1, listed_maps: false, p: 1}
            },
            {
             mode: 'backprop',
             name: 'main_backprop',
             trainer: 'main_trainer'
            }
            #-------------------------------------------------#
        ]
    eval_forwards:
        data:
            [
                {
                 mode: 'minning',
                 func: 'b_wrapper.add_variable',
                 param: {value: [[0], [0]], load: false, source: ['batch', 'rgb' ]},
                 out_name: 'model'
                },
            ]
        queries:
            [
                {
                 mode: 'minning',
                 func: 'b_wrapper.add_variable',
                 param: {value: full_model.pth, load: true, source: ['batch', 'rgb' ]},
                 out_name: 'model'
                },
                #------------------ Main Forward -----------------#
                {
                mode: forward,
                func: minning.custom_forward,
                param: {multiples_instance: false, input_targets: [['batch', 'rgb' ], ]},
                net_name: 'Main',
                out_name: 'fw_main'
                },
                {
                mode: forward,
                func: minning.custom_forward,
                param: {multiples_instance: false, input_targets: [['fw_main'], ]},
                net_name: 'Deconv',
                out_name: 'maps'
                },
                {
                 mode: 'minning',
                 func: 'b_wrapper.batched_depth_map_to_pc',
                 param: {depth_maps: ['batch', 'depth'], K: ['batch', K], remove_zeros: true, inverse_depth: false},
                 #param: {depth_maps: ['maps'], K: [batch, K], remove_zeros: false, inverse_depth: true},
                 out_name: 'pc'
                },
                {
                 mode: 'minning',
                 func: 'b_wrapper.batched_pc_pruning',
                 param: {pc: [pc], mode: 'regular', pruning_fact: 0.05},
                 out_name: 'pc'
                },
                {
                 mode: 'minning',
                 func: 'b_wrapper.batched_icp',
                 param: {pc_ref: [model], pc_to_align: [pc], init_T: [batch, pose, T], param_icp: {iter: 0, tolerance: 0.001, fact: 2000, dnorm: False, verbose: false, fixed_fact: true}},
                 out_name: 'icp'
                },
            ]
    access_pose: ['icp', 'poses']
    build_model_func: torch.cat

eval_class: 'score.Functions.GlobalPoseError'
param_eval_class:
    data_type: 'position'
    pooling_type: 'mean'
test_func:
    mean_pos:
        class: 'score.Functions.GlobalPoseError'
        param_class:
            data_type: 'position'
            pooling_type: 'mean'
    med_pos:
        class: 'score.Functions.GlobalPoseError'
        param_class:
            data_type: 'position'
            pooling_type: 'median'
    mean_ori:
        class: 'score.Functions.GlobalPoseError'
        param_class:
          data_type: 'orientation'
          pooling_type: 'mean'
    med_ori:
        class: 'score.Functions.GlobalPoseError'
        param_class:
          data_type: 'orientation'
          pooling_type: 'median'