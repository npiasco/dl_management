class: 'trainers.PoseTrainers.MultNetTrainer'
param_class:
    cuda_on: False
    val_num_workers: 8
    optimizers_params:
        main_trainer:
            associated_net: ['Main', 'Deconv']
            optimizer_type: ADAM
            param:
                lr: 0.0001
                weight_decay: 0.001
    training_pipeline:
        [
            #----------------- Set Variables  ----------------#
            {
             mode: 'minning',
             func: 'b_wrapper.add_variable',
             param: {value: [[36.5625, 0, 20.0], [0.0, 36.5625, 15.0], [0.0, 0.0, 1.0]], load: false, source: ['batch', 'rgb' ]},
             out_name: 'K'
            },
            {
             mode: 'minning',
             func: 'b_wrapper.add_variable',
             param: {value: base_model.pth, load: true, source: ['batch', 'rgb' ]},
             out_name: 'model'
            },

            #------------------ Main Forward -----------------#
            {
                mode: forward,
                func: minning.custom_forward,
                param: {multiples_instance: false, input_targets: [['batch', 'rgb' ], ]},
                net_name: 'Main',
                out_name: 'fw_main'
            },
            {
                mode: forward,
                func: minning.custom_forward,
                param: {multiples_instance: false, input_targets: [['fw_main' , 'feat'], ['fw_main', 'res_1'], ['fw_main', 'res_2']]},
                net_name: 'Deconv',
                out_name: 'maps'
            },
            #-------------------------------------------------#

            #-------------------- ICP --------------------#
            {
             mode: 'minning',
             func: 'b_wrapper.batched_depth_map_to_pc',
             param: {depth_maps: [maps], K: [K], remove_zeros: false},
             out_name: 'pc'
            },
            {
             mode: 'minning',
             func: 'b_wrapper.batched_pc_pruning',
             param: {pc: [pc], mode: 'random', pruning_fact: 0.1},
             out_name: 'pruned_pc'
            },
            {
             mode: 'minning',
             func: 'b_wrapper.batched_icp',
             param: {pc_ref: [model], pc_to_align: [pruned_pc], param_icp: {iter: 1, tolerance: 0.001, unit_fact: 2, distance_norm: False}},
             out_name: 'poses'
            },
            #-------------------------------------------------#

            #-------------------- Losses ---------------------#
            {
             mode: 'loss',
             name: 'min_max_pq_loss',
             func: 'loss_func.minmax_pose_loss',
             args: [['poses', 'p'], ['poses', 'q'], ['batch', 'pose', 'position'], ['batch', 'pose', 'orientation']],
             param: {}
            },
            #-------------------------------------------------#
        ]
    eval_forwards:
        dataset:
            [
                {
                 mode: 'minning',
                 func: 'b_wrapper.add_variable',
                 param: {value: [[0], [0]], load: false, source: ['batch', 'rgb' ]},
                 out_name: 'model'
                },
            ]
        queries:
            [
                {
                 mode: 'minning',
                 func: 'b_wrapper.add_variable',
                 param: {value: [[36.5625, 0, 20.0], [0.0, 36.5625, 15.0], [0.0, 0.0, 1.0]], load: false, source: ['batch', 'rgb' ]},
                 out_name: 'K'
                },
                {
                 mode: 'minning',
                 func: 'b_wrapper.add_variable',
                 param: {value: base_model.pth, load: true, source: ['batch', 'rgb' ]},
                 out_name: 'model'
                },
                #------------------ Main Forward -----------------#
                {
                    mode: forward,
                    func: minning.custom_forward,
                    param: {multiples_instance: false, input_targets: [['batch', 'rgb' ], ]},
                    net_name: 'Main',
                    out_name: 'fw_main'
                },
                {
                    mode: forward,
                    func: minning.custom_forward,
                    param: {multiples_instance: false, input_targets: [['fw_main' , 'feat'], ['fw_main', 'res_1'], ['fw_main', 'res_2']]},
                    net_name: 'Deconv',
                    out_name: 'maps'
                },
                {
                 mode: 'minning',
                 func: 'b_wrapper.batched_depth_map_to_pc',
                 param: {depth_maps: [maps], K: [K], remove_zeros: false},
                 out_name: 'pc'
                },
                {
                 mode: 'minning',
                 func: 'b_wrapper.batched_icp',
                 param: {pc_ref: [model], pc_to_align: [pc], param_icp: {iter: 1, tolerance: 0.001, unit_fact: 2, distance_norm: False}},
                 out_name: 'pose'
                },
            ]
    build_model_func: torch.cat

eval_class: 'score.Functions.GlobalPoseError'
param_eval_class:
    data_type: 'position'
    pooling_type: 'mean'
test_func:
    mean_pos:
        class: 'score.Functions.GlobalPoseError'
        param_class:
            data_type: 'position'
            pooling_type: 'mean'
    med_pos:
        class: 'score.Functions.GlobalPoseError'
        param_class:
            data_type: 'position'
            pooling_type: 'median'
    mean_ori:
        class: 'score.Functions.GlobalPoseError'
        param_class:
          data_type: 'orientation'
          pooling_type: 'mean'
    med_ori:
        class: 'score.Functions.GlobalPoseError'
        param_class:
          data_type: 'orientation'
          pooling_type: 'median'